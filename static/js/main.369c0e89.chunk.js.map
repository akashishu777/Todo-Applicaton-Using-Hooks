{"version":3,"sources":["components/AddTodo.tsx","components/TodoHeader.tsx","components/TodoList.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["AddTodo","props","initialValue","useState","value","setValue","onChange","e","target","resetValue","useInputValue","text","className","autoFocus","placeholder","onClick","addTodo","MemoizedTodoHeader","React","memo","count","pendingTodo","TodoList","header","todos","length","getTodoList","map","todo","index","key","toggleComplete","style","fontSize","display","textDecoration","complete","id","marginLeft","deleteTodo","App","setTodos","setPendingTodo","handleAddTodo","removeIndex","filter","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.369c0e89.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../App.css';\r\nimport { Todo } from '../TypeDefinition/Todo';\r\n\r\nconst useInputValue = (initialValue: string) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    return {\r\n        value,\r\n        onChange: (e: { target: { value: React.SetStateAction<string>; }; }) => setValue(e.target.value),\r\n        resetValue: () => setValue('')\r\n    }\r\n}\r\n\r\nconst AddTodo: React.FC<Todo.IAddTodoProps> = (props) => {\r\n\r\n  const { resetValue, ...text } = useInputValue('');\r\n\r\n  const handleAddTodo = (value: any) => { \r\n    if (value !== '') {\r\n      props.addTodo(value);\r\n      resetValue();\r\n    }\r\n  }\r\n\r\n  return (\r\n        <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <br />\r\n          <div className=\"input-group\">\r\n          <input {...text}\r\n              className=\"form-control\" \r\n              autoFocus\r\n              placeholder=\"Enter new todo\" \r\n          />\r\n            <div className=\"input-group-append\">\r\n              <button className=\"btn btn-primary\" onClick={() => handleAddTodo(text.value)}>\r\n                Add\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default AddTodo;","import React from \"react\";\r\n\r\nconst pluralize = (count: number) => count > 1 ? `There are ${count} todos.` : `There is ${count} todo.`;\r\n\r\nconst TodoHeader = (props: any) => (\r\n    <div className=\"row\">\r\n    <div className=\"col-md-8\">\r\n      <h5>Pending Items</h5>\r\n    </div>\r\n    <div className=\"col-md-4\">\r\n      <span className=\"float-right\">{pluralize(props.pendingTodo)}</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// create a version that only renders on prop changes\r\nexport const MemoizedTodoHeader = React.memo(TodoHeader);","import React from 'react';\r\nimport '../App.css';\r\nimport { MemoizedTodoHeader } from './TodoHeader';\r\nimport { Todo } from '../TypeDefinition/Todo';\r\n\r\n\r\nconst TodoList: React.FC<Todo.ITodoListProps> = (props) => {\r\n\r\n  let header = props.todos.length === 0 ? (\r\n      <h4>All todos are done! Take a rest!</h4>\r\n    ) : (\r\n        <MemoizedTodoHeader pendingTodo = {props.pendingTodo} />\r\n    );\r\n\r\n  const getTodoList = props.todos.map((todo: Todo.ITodo, index: number) => (\r\n      <div key={index} >\r\n            <li onClick={() => props.toggleComplete(index)} \r\n                style={{ fontSize: '30px', display: 'inline', textDecoration: todo.complete ? 'line-through': ''}}>\r\n                    {todo.text}\r\n            </li>\r\n            <button\r\n                id={'btn-' + index}\r\n                className=\"float-right btn btn-danger btn-sm\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => props.deleteTodo(index)}\r\n            >\r\n            Delete\r\n            </button>\r\n        </div>\r\n      ));\r\n    \r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-12\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <br />\r\n            {header}\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <ul className=\"list-group\">\r\n              {getTodoList}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\nimport '../App.css';\nimport AddTodo from './AddTodo';\nimport TodoList from './TodoList';\nimport { Todo } from '../TypeDefinition/Todo';\n\nconst App: React.FC = () => {\n\n  const [todos, setTodos] = useState([] as any);\n  const [pendingTodo, setPendingTodo] = useState(todos.length);\n\n  const toggleComplete = (index: number): void => {\n    setTodos(todos.map((todo: any, key: number) => (index === key) ? { ...todo,complete: !todo.complete } : todo ));\n    setPendingTodo(todos[index].complete ? pendingTodo + 1 : pendingTodo - 1); \n  }\n\n  const handleRemoveTodo = (removeIndex: number): void => {\n    setTodos(todos.filter((item: Todo.ITodo, key: number) => key !== removeIndex));\n    setPendingTodo(todos[removeIndex].complete ? pendingTodo : pendingTodo - 1);\n   };\n\n  const handleAddTodo = (text: string): void => {\n    setTodos([{ text, complete: false }, ...todos]); \n    setPendingTodo(pendingTodo+1)\n  }\n\n  return (\n    <div>\n        <div className=\"container\">\n          <AddTodo addTodo={(text: any) => handleAddTodo(text) }/>\n          <TodoList todos={todos} \n                    pendingTodo={pendingTodo}\n                    toggleComplete={(index: number) => toggleComplete(index)} \n                    deleteTodo={(index: number) => handleRemoveTodo(index)}\n          />\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}